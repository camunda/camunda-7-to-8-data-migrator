categories:
- category: input output mappings
  cases:
  - name: Call Activity Simple Variable Input/Output
    givenBpmn: |
      <bpmn:callActivity id="Activity_1yi2nck" name="example">
        <bpmn:extensionElements>
          <camunda:in source="input" target="input" />
          <camunda:out source="output" target="output" />
        </bpmn:extensionElements>
      </bpmn:callActivity>
    expectedBpmn: |
      <bpmn:callActivity completionQuantity="1" id="Activity_1yi2nck" isForCompensation="false" name="example" startQuantity="1">
            <bpmn:extensionElements>
              <zeebe:calledElement propagateAllChildVariables="false" propagateAllParentVariables="false"/>
              <zeebe:ioMapping>
                <zeebe:input source="=input" target="input"/>
                <zeebe:output source="=output" target="output"/>
              </zeebe:ioMapping>
            </bpmn:extensionElements>            
      </bpmn:callActivity>
    expectedMessages: |
      <conversion:message severity="REVIEW">in, Parameter: 'input': Please review transformed expression: 'input' -&gt; '=input'.</conversion:message>
      <conversion:message severity="REVIEW">out, Parameter: 'output': Please review transformed expression: 'output' -&gt; '=output'.</conversion:message>    
- category: execution listener
  cases:
  - name: Execution Listener Variations
    description: If a service task has multiple execution listeners with different implementations, every execution listener should be transformed and the implementations should be mapped to an implementation that is compatible with Camunda 8. Also, the messages being added should outline what the original implementation looked like and what has to be done to finalize the conversion.
    givenBpmn: |
      <bpmn:serviceTask id="ServiceTaskWithListenerTask" name="Service task with listener" camunda:expression="${service.call(myVariable)}" camunda:resultVariable="myResult">
        <bpmn:extensionElements>
          <camunda:executionListener expression="${endListener.execute(something)}" event="end" />
          <camunda:executionListener delegateExpression="${anotherStartListener}" event="start" />
          <camunda:executionListener event="end">
            <camunda:script scriptFormat="groovy">print("something");</camunda:script>
          </camunda:executionListener>
          <camunda:executionListener class="com.example.StartListener" event="start" />
        </bpmn:extensionElements>
      </bpmn:serviceTask>
    expectedBpmn: |
      <bpmn:serviceTask completionQuantity="1" id="ServiceTaskWithListenerTask" implementation="##WebService" isForCompensation="false" name="Service task with listener" startQuantity="1">
            <bpmn:extensionElements>
              <zeebe:taskHeaders>
                <zeebe:header key="resultVariable" value="myResult"/>
                <zeebe:header key="expression" value="${service.call(myVariable)}"/>
              </zeebe:taskHeaders>
              <zeebe:taskDefinition type="serviceCall"/>
              <zeebe:executionListeners>
                <zeebe:executionListener eventType="end" type="${endListener.execute(something)}"/>
                <zeebe:executionListener eventType="start" type="anotherStartListener"/>
                <zeebe:executionListener eventType="end" type="groovy"/>
                <zeebe:executionListener eventType="start" type="com.example.StartListener"/>
              </zeebe:executionListeners>
            </bpmn:extensionElements>
      </bpmn:serviceTask>
    expectedMessages: |
      <conversion:message severity="WARNING">Element 'script' cannot be transformed. Script 'print("something");' with format 'groovy' on 'executionListener'.</conversion:message>
      <conversion:message severity="TASK">Listener at 'end' with implementation '${endListener.execute(something)}' can be transformed to a job worker. Please adjust the job type.</conversion:message>
      <conversion:message severity="TASK">Listener at 'start' with implementation '${anotherStartListener}' can be transformed to a job worker. Please adjust the job type.</conversion:message>
      <conversion:message severity="TASK">Listener at 'end' with implementation 'groovy' can be transformed to a job worker. Please adjust the job type.</conversion:message>
      <conversion:message severity="TASK">Listener at 'start' with implementation 'com.example.StartListener' can be transformed to a job worker. Please adjust the job type.</conversion:message>
      <conversion:message severity="REVIEW">Delegate class or expression '${service.call(myVariable)}' has been transformed to job type 'serviceCall'.</conversion:message>
      <conversion:message severity="REVIEW">Attribute 'resultVariable' on 'serviceTask' was mapped. Is now available as header 'resultVariable'.</conversion:message>
  - name: Execution Listener on start event
    givenBpmn: |
      <bpmn:serviceTask id="serviceTask" name="Service Task">
        <bpmn:extensionElements>
          <camunda:executionListener delegateExpression="${myNewJobType}" event="start" />
        </bpmn:extensionElements>
      </bpmn:serviceTask>
    expectedBpmn: |
      <bpmn:serviceTask completionQuantity="1" id="serviceTask" implementation="##WebService" isForCompensation="false" name="Service Task" startQuantity="1">
            <bpmn:extensionElements>
              <zeebe:executionListeners>
                <zeebe:executionListener eventType="start" type="myNewJobType"/>
              </zeebe:executionListeners>
            </bpmn:extensionElements>            
      </bpmn:serviceTask>
    expectedMessages: |
      <conversion:message severity="TASK">Listener at 'start' with implementation '${myNewJobType}' can be transformed to a job worker. Please adjust the job type.</conversion:message>
- category: script task
  cases:
  - name: Convert Groovy inline script
    givenBpmn: |
      <bpmn:scriptTask id="script1" name="Inline Groovy" scriptFormat="groovy">
        <bpmn:script>
          sum = 0
          for ( i in inputArray ) {
            sum += i
          }
        </bpmn:script>
      </bpmn:scriptTask>
    expectedBpmn: |
      <bpmn:scriptTask completionQuantity="1" id="script1" isForCompensation="false" name="Inline Groovy" scriptFormat="groovy" startQuantity="1">
        <extensionElements>
          <zeebe:taskHeaders>
            <zeebe:header key="script" value="&#10; sum = 0&#10; for ( i in inputArray ) {&#10; sum += i&#10; }&#10;"/>
            <zeebe:header key="language" value="groovy"/>
          </zeebe:taskHeaders>
          <zeebe:taskDefinition type="script"/>
        </extensionElements>
      </bpmn:scriptTask>
    expectedMessages: |
      <conversion:message severity="REVIEW">Script format 'groovy' was set to header 'language'. Please review.</conversion:message>
      <conversion:message severity="REVIEW">Element 'scriptTask' was transformed. Currently, script tasks are implemented like service tasks with job type 'script'. Please review your implementation.</conversion:message>
      <conversion:message severity="REVIEW">Script was set to header 'script'. Please review.</conversion:message>
  - name: Convert JUEL with result variable
    givenBpmn: |
      <bpmn:scriptTask id="script1" name="JUEL" scriptFormat="juel" camunda:resultVariable="result">
        <bpmn:script>#{echo}</bpmn:script>
      </bpmn:scriptTask>
    expectedBpmn: |
      <bpmn:scriptTask completionQuantity="1" id="script1" isForCompensation="false" name="JUEL" scriptFormat="juel" startQuantity="1">
        <extensionElements>
          <zeebe:taskHeaders>
            <zeebe:header key="script" value="#{echo}"/>
            <zeebe:header key="language" value="juel"/>
            <zeebe:header key="resultVariable" value="result"/>
          </zeebe:taskHeaders>
          <zeebe:taskDefinition type="script"/>
        </extensionElements>
      </bpmn:scriptTask>
    expectedMessages: |
      <conversion:message severity="REVIEW">Script format 'juel' was set to header 'language'. Please review.</conversion:message>
      <conversion:message severity="REVIEW">Element 'scriptTask' was transformed. Currently, script tasks are implemented like service tasks with job type 'script'. Please review your implementation.</conversion:message>
      <conversion:message severity="REVIEW">Script was set to header 'script'. Please review.</conversion:message>
      <conversion:message severity="REVIEW">Attribute 'resultVariable' on 'scriptTask' was mapped. Is now available as header 'resultVariable'.</conversion:message>
  - name: Convert Groovy external script
    givenBpmn: |
      <bpmn:scriptTask id="script1" name="Groovy External" scriptFormat="groovy" camunda:resource="org/camunda/bpm/task.groovy">
      </bpmn:scriptTask>
    expectedBpmn: |
      <bpmn:scriptTask completionQuantity="1" id="script1" isForCompensation="false" name="Groovy External" scriptFormat="groovy" startQuantity="1">
        <extensionElements>
          <zeebe:taskHeaders>
            <zeebe:header key="resource" value="org/camunda/bpm/task.groovy"/>
            <zeebe:header key="language" value="groovy"/>
          </zeebe:taskHeaders>
          <zeebe:taskDefinition type="script"/>
        </extensionElements>
      </bpmn:scriptTask>
    expectedMessages: |
      <conversion:message severity="REVIEW">Script format 'groovy' was set to header 'language'. Please review.</conversion:message>
      <conversion:message severity="REVIEW">Element 'scriptTask' was transformed. Currently, script tasks are implemented like service tasks with job type 'script'. Please review your implementation.</conversion:message>
      <conversion:message severity="REVIEW">Attribute 'resource' on 'scriptTask' was mapped. Is set to header resource.</conversion:message>
- category: business rules task
  cases:
  - name: Business Rule Task
    givenBpmn: |
      <bpmn:businessRuleTask id="ruleTask" name="I am weird" camunda:expression="${y}" camunda:resultVariable="x" />
    expectedBpmn: |
      <bpmn:businessRuleTask completionQuantity="1" id="ruleTask" implementation="##unspecified" isForCompensation="false" name="I am weird" startQuantity="1">
        <extensionElements>
            <zeebe:taskHeaders>
              <zeebe:header key="resultVariable" value="x"/>
              <zeebe:header key="expression" value="${y}"/>
            </zeebe:taskHeaders>
            <zeebe:taskDefinition type="y"/>
        </extensionElements>
      </bpmn:businessRuleTask>
    expectedMessages: |
      <conversion:message severity="REVIEW">Delegate class or expression '${y}' has been transformed to job type 'y'.</conversion:message>
      <conversion:message severity="REVIEW">Attribute 'resultVariable' on 'businessRuleTask' was mapped. Is now available as header 'resultVariable'.</conversion:message>