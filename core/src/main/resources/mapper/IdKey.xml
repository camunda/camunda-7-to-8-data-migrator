<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under
  ~ one or more contributor license agreements. See the NOTICE file distributed
  ~ with this work for additional information regarding copyright ownership.
  ~ Licensed under the Camunda License 1.0. You may not use this file
  ~ except in compliance with the Camunda License 1.0.
  -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.camunda.migrator.impl.persistence.IdKeyMapper">

  <resultMap id="idKeyResultMap" type="io.camunda.migrator.impl.persistence.IdKeyDbModel">
    <id property="c7Id" column="C7_ID" jdbcType="VARCHAR"/>
    <result property="c8Key" column="C8_KEY" jdbcType="BIGINT"/>
    <result property="createTime" column="CREATE_TIME" jdbcType="TIMESTAMP"/>
    <result property="type" column="TYPE" jdbcType="VARCHAR"/>
    <result property="skipReason" column="SKIP_REASON" jdbcType="VARCHAR"/>
  </resultMap>

  <select id="countSkipped" resultType="long">
    SELECT COUNT(C7_ID) FROM ${prefix}MIGRATION_MAPPING
    WHERE C8_KEY IS NULL
  </select>

  <select id="countSkippedByType" resultType="long">
    SELECT COUNT(C7_ID) FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND C8_KEY IS NULL
  </select>

  <!-- countMigratedByType is used for testing and by the migrator cockpit plugin -->
  <select id="findSkippedByType" resultMap="idKeyResultMap">
    <include refid="findSkippedByQueryCriteriaSql"/>
  </select>

  <!-- countMigratedByType is used by the migrator cockpit plugin -->
  <select id="countMigratedByType" resultType="long">
    SELECT COUNT(C7_ID) FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND C8_KEY IS NOT NULL
  </select>

  <!-- findMigratedByType is used for testing and by the migrator cockpit plugin -->
  <select id="findMigratedByType" resultMap="idKeyResultMap">
    SELECT C7_ID, C8_KEY, CREATE_TIME, TYPE, SKIP_REASON FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND C8_KEY IS NOT NULL
    <include refid="io.camunda.migrator.Commons.pageSql"/>
  </select>

  <sql id="findSkippedByQueryCriteriaSql">
    SELECT C7_ID, C8_KEY, CREATE_TIME, TYPE, SKIP_REASON FROM ${prefix}MIGRATION_MAPPING
    WHERE TYPE = #{type} AND C8_KEY IS NULL
    <include refid="io.camunda.migrator.Commons.pageSql"/>
  </sql>

  <select id="findAllC7Ids">
    SELECT C7_ID
    FROM ${prefix}MIGRATION_MAPPING
  </select>

  <update id="updateC8KeyByC7IdAndType" parameterType="io.camunda.migrator.impl.persistence.IdKeyDbModel">
    UPDATE ${prefix}MIGRATION_MAPPING
    SET C8_KEY = #{c8Key, jdbcType=BIGINT}
    WHERE C7_ID = #{c7Id, jdbcType=VARCHAR} AND TYPE = #{type, jdbcType=VARCHAR}
  </update>

  <select id="checkHasC8KeyByC7IdAndType" resultType="boolean">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM ${prefix}MIGRATION_MAPPING
    WHERE C7_ID = #{c7Id, jdbcType=VARCHAR}
    AND TYPE = #{type, jdbcType=VARCHAR}
    AND C8_KEY IS NOT NULL
  </select>

  <select id="checkExistsByC7IdAndType" resultType="boolean">
    SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
    FROM ${prefix}MIGRATION_MAPPING
    WHERE C7_ID = #{c7Id, jdbcType=VARCHAR}
    AND TYPE = #{type, jdbcType=VARCHAR}
  </select>

  <select id="findLatestCreateTimeByType" parameterType="java.lang.String">
    <!-- No need to order with two criteria since we limit result to return exactly one create time -->
    SELECT CREATE_TIME FROM ${prefix}MIGRATION_MAPPING WHERE TYPE = '${type}' ORDER BY CREATE_TIME DESC
    <include refid="io.camunda.migrator.Commons.singleResultSql"/>
  </select>

  <select id="findC8KeyByC7IdAndType" resultType="java.lang.Long">
    SELECT C8_KEY FROM ${prefix}MIGRATION_MAPPING
    WHERE C7_ID = #{c7Id, jdbcType=VARCHAR} AND TYPE = #{type, jdbcType=VARCHAR}
    <include refid="io.camunda.migrator.Commons.singleResultSql"/>
  </select>

  <insert
    id="insert"
    parameterType="io.camunda.migrator.impl.persistence.IdKeyDbModel"
    flushCache="true">
    INSERT INTO ${prefix}MIGRATION_MAPPING (C7_ID, C8_KEY, CREATE_TIME, TYPE, SKIP_REASON)
    VALUES (#{c7Id, jdbcType=VARCHAR}, #{c8Key, jdbcType=BIGINT}, #{createTime, jdbcType=TIMESTAMP}, #{type, jdbcType=VARCHAR}, #{skipReason, jdbcType=VARCHAR})
  </insert>

  <delete id="deleteByC7Id">
    DELETE FROM ${prefix}MIGRATION_MAPPING
    WHERE C7_ID = #{c7Id}
  </delete>

</mapper>