name: Release

on:
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: "RELEASE_VERSION"
        required: true
        default: "0.0.0"
      DEVELOPMENT_VERSION:
        required: true
        description: "DEVELOPMENT_VERSION"
        default: "0.1.0-SNAPSHOT"
      IS_DRY_RUN:
        description: "DRY_RUN"
        required: true
        type: boolean
        default: true
      ONLY_PUSH_TO_MAVEN_CENTRAL:
        # To push artefact from tag to maven central. Useful if artefacts are cleaned up before they are released.
        description: "ONLY_PUSH_TO_MAVEN_CENTRAL"
        required: true
        type: boolean
        default: false
defaults:
  run:
    shell: bash

env:
  RELEASE_VERSION: ${{ inputs.RELEASE_VERSION }}
  IS_DRY_RUN: ${{ inputs.IS_DRY_RUN }}
  ONLY_PUSH_TO_MAVEN_CENTRAL: ${{ inputs.ONLY_PUSH_TO_MAVEN_CENTRAL }}
  DEVELOPMENT_VERSION: ${{ inputs.DEVELOPMENT_VERSION }}
  PUSH_CHANGES: ${{ inputs.IS_DRY_RUN == false }}
  GH_TOKEN: ${{ github.token }}

jobs:
  release:
    name: Maven Release
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Output Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"

      # This step generates a GitHub App token to be used in Git operations as a workaround for
      # the known GitHub issue described in https://github.com/camunda/camunda/issues/28522
      - name: Generate GitHub token
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: GITHUB_APP_ID
          github-app-id-vault-path: secret/data/products/cambpm/ci/github-workflow
          github-app-private-key-vault-key: GITHUB_APP_PRIVATE_KEY
          github-app-private-key-vault-path: secret/data/products/cambpm/ci/github-workflow
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}

      - name: Checkout Code
        if: ${{ !inputs.ONLY_PUSH_TO_MAVEN_CENTRAL }}
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref }}
          # Overriding the default GITHUB_TOKEN with a GitHub App token in order to workaround
          # the known GitHub issue described in https://github.com/camunda/camunda/issues/28522
          # NOTES:
          # - This token will be used for all git operations in this job
          # - This token expires after 1 hour (https://github.com/actions/create-github-app-token?tab=readme-ov-file#create-github-app-token)
          token: ${{ steps.github-token.outputs.token }}

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.4.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_GPG_SIGNING_KEY_PUB;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_USR;
            secret/data/github.com/organizations/camunda MAVEN_CENTRAL_DEPLOYMENT_PSW;

      - name: Git User Setup
        run: |
          git config --global user.email "github-actions[release]"
          git config --global user.name "github-actions[release]@users.noreply.github.com"

      - name: Install Maven Central GPG Key
        # setup-maven supports this as well but needs the key in the armor ascii format,
        # while we only have it plain bas64 encoded
        # see https://github.com/actions/setup-java/issues/100#issuecomment-742679976
        run: |
          echo -n "${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}" \
            | base64 --decode \
            | gpg -q --allow-secret-key-import --import --no-tty --batch --yes
          echo -n "${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PUB }}" \
            | base64 --decode \
            | gpg -q --import --no-tty --batch --yes
          
      - name: Setup Build Tooling
        uses: ./.github/actions/setup-maven
        with:
          maven-servers: |
            [{
                "id": "central",
                "username": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_USR }}",
                "password": "${{ steps.secrets.outputs.MAVEN_CENTRAL_DEPLOYMENT_PSW }}"
            }]
          vault-address: ${{ secrets.VAULT_ADDR }}
          vault-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-secret-id: ${{ secrets.VAULT_SECRET_ID }}
          camunda-nexus: true

      - name: Maven Prepare Release
        if: ${{ !inputs.ONLY_PUSH_TO_MAVEN_CENTRAL }}
        id: maven-prepare-release
        run: |
          # Preparing the maven release
          # https://maven.apache.org/maven-release/maven-release-plugin/prepare-mojo.html
          # https://maven.apache.org/maven-release/maven-release-plugin/usage/prepare-release.html
          mvn release:prepare -B \
            -Dresume=false \
            -Dtag=${RELEASE_VERSION} \
            -DreleaseVersion=${RELEASE_VERSION} \
            -DdevelopmentVersion=${DEVELOPMENT_VERSION} \
            -DpushChanges=${PUSH_CHANGES} \
            -DremoteTagging=${PUSH_CHANGES} \
            -DignoreSnapshots=true \
            -Darguments='-Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}" -DskipTests=true'

      - name: Collect Release Artifacts
        if: ${{ !inputs.ONLY_PUSH_TO_MAVEN_CENTRAL }}
        id: release-artifacts
        run: |
          ARTIFACT_DIR=$(mktemp -d)
          cp assembly/target/camunda-7-to-8-data-migrator-${RELEASE_VERSION}.tar.gz "${ARTIFACT_DIR}/"
          cp assembly/target/camunda-7-to-8-data-migrator-${RELEASE_VERSION}.zip "${ARTIFACT_DIR}/"
          echo "dir=${ARTIFACT_DIR}" >> $GITHUB_OUTPUT

      - name: Upload Release Artifacts
        if: ${{ !inputs.ONLY_PUSH_TO_MAVEN_CENTRAL }}
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${RELEASE_VERSION}
          path: ${{ steps.release-artifacts.outputs.dir }}
          retention-days: 14

      - name: Maven Perform Release - Artifactory
        if: ${{ !inputs.ONLY_PUSH_TO_MAVEN_CENTRAL }}
        id: maven-perform-release-camunda
        env:
          SKIP_REPO_DEPLOY: ${{ inputs.IS_DRY_RUN }}
        run: |
          # Perform a maven release
          # https://maven.apache.org/maven-release/maven-release-plugin/perform-mojo.html
          # https://maven.apache.org/maven-release/maven-release-plugin/usage/perform-release.html
          mvn release:perform -B \
            -Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}" \
            -DlocalCheckout=${{ inputs.IS_DRY_RUN }} \
            -Pcentral-sonatype-publish,distro \
            -Darguments='-DskipTests=true -Dskip.central.release=true -Dskip.camunda.release=${SKIP_REPO_DEPLOY}'

      - name: Checkout Code
        # Tag does not exist if dry run
        if: ${{ !inputs.IS_DRY_RUN }}
        uses: actions/checkout@v5
        with:
          # Checkout the release tag to perform a second deployment 
          ref: ${{ env.RELEASE_VERSION }}
          token: ${{ steps.github-token.outputs.token }}

      - name: Maven Perform Release - Maven Central
        id: maven-perform-release-maven-central
        env:
          SKIP_REPO_DEPLOY: ${{ inputs.IS_DRY_RUN }}
        run: |
          mvn deploy -B \
            -Dgpg.passphrase="${{ steps.secrets.outputs.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}" \
            -DlocalCheckout=${{ inputs.IS_DRY_RUN }} \
            -Pcentral-sonatype-publish,central-release \
            -DskipTests=true -Dskip.central.release=${SKIP_REPO_DEPLOY} -Dskip.camunda.release=true
